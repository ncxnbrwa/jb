package cn.iimedia.jb.rankingBrand.fragment

import android.os.Bundle
import cn.iimedia.jb.R
import cn.iimedia.jb.common.HTTP_LOG_TAG
import cn.iimedia.jb.common.RANK_INFO_ID
import cn.iimedia.jb.http.APIConstants
import cn.iimedia.jb.http.bean.RankingPropertyBean
import cn.iimedia.jb.rankingBrand.adapter.RankingGradeAdapter
import com.xiong.appbase.base.BaseFragment
import com.xiong.appbase.custom.LinearLayoutManagerWrapper
import com.xiong.appbase.extension.addDivider
import com.xiong.appbase.http.RequestEngine
import com.xiong.appbase.utils.DLog
import com.xiong.appbase.utils.ELS
import com.xiong.appbase.utils.MyUtils
import kotlinx.android.synthetic.main.fragment_grade_list.*
import retrofit2.Call
import retrofit2.Callback
import retrofit2.Response

/**
 * Created by iiMedia on 2018/4/25.
 * 综合评分
 */
class FragmentGradeList : BaseFragment() {
    var api: APIConstants? = null
    var els: ELS? = null
    var rankInfoId = 0

    companion object {
        fun getInstance(bundle: Bundle): FragmentGradeList {
            val fragment = FragmentGradeList()
            fragment.arguments = bundle
            return fragment
        }
    }

    override fun getLayoutId(): Int {
        return R.layout.fragment_grade_list
    }

    override fun init() {
        api = RequestEngine.createService(APIConstants::class.java)
        els = ELS.getInstance()
        rankInfoId = arguments!!.getInt(RANK_INFO_ID, 0)
    }

    override fun lazyLoad() {
        getData()
    }

    private fun getData() {
        val manager = LinearLayoutManagerWrapper(mActivity)
        manager.isSmoothScrollbarEnabled = true
        manager.isAutoMeasureEnabled()
        list.layoutManager = manager
        list.isNestedScrollingEnabled = false
        list.setHasFixedSize(true)
        list.addDivider(mActivity, R.drawable.vertical_white_divider_16dp)

        val call = api?.getRankingProPerty(35, rankInfoId, els?.getStringData(ELS.IMEI))
        call?.enqueue(object : Callback<RankingPropertyBean> {
            override fun onFailure(call: Call<RankingPropertyBean>?, t: Throwable?) {
                DLog.w(HTTP_LOG_TAG, "榜单属性获取失败")
                showToast("榜单属性获取失败")
            }

            override fun onResponse(call: Call<RankingPropertyBean>?, response: Response<RankingPropertyBean>?) {
                val bean = response?.body()
                if (bean?.code == 1) {
                    val propertiesList = bean.data.properties
                    if (propertiesList.isNotEmpty()) {
                        list.adapter = RankingGradeAdapter(mActivity,
                                MyUtils.getScreenWidth() - 64, propertiesList)
                    }
                }
            }
        })

    }
}
package cn.iimedia.jb.mine.activity

import android.Manifest
import android.app.Activity
import android.content.Intent
import android.content.pm.PackageManager
import android.os.Build
import android.os.Bundle
import android.support.v4.app.ActivityCompat
import android.support.v4.content.ContextCompat
import android.view.View
import cn.iimedia.jb.R
import com.afollestad.materialdialogs.MaterialDialog
import com.xiong.appbase.base.BaseActivity
import com.xiong.appbase.custom.GifSizeFilter
import com.xiong.appbase.custom.GlideEngine
import com.xiong.appbase.extension.loadImageFit
import com.xiong.appbase.utils.DialogUtils
import com.xiong.appbase.utils.ELS
import com.zhihu.matisse.Matisse
import com.zhihu.matisse.MimeType
import com.zhihu.matisse.filter.Filter
import com.zhihu.matisse.internal.entity.CaptureStrategy
import kotlinx.android.synthetic.main.activity_user_info.*
import java.util.*


/**
 * Created by iiMedia on 2018/5/3.
 * 用户信息页
 */
class UserInfoActivity : BaseActivity(), View.OnClickListener {
    val els = ELS.getInstance()
    private val REQUEST_PERMISSION_CODE = 123
    private val PICTURE_CODE_CHOOSE = 23
    private val REQUIRED_PERMISSION_LIST = arrayOf(Manifest.permission.WRITE_EXTERNAL_STORAGE
            , Manifest.permission.READ_EXTERNAL_STORAGE)
    private val missingPermission = ArrayList<String>()

    override fun getLayoutId(): Int {
        return R.layout.activity_user_info
    }

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        name.setText(els.getStringData(ELS.USERNAME))
        icon.loadImageFit(els.getStringData(ELS.USER_IMG))

        back.setOnClickListener(this)
        name_layout.setOnClickListener(this)
        img_layout.setOnClickListener(this)
    }

    override fun onClick(v: View?) {
        when (v?.id) {
            R.id.back -> finish()
            R.id.name_layout -> {
                val nameDialog = DialogUtils.showEditText(mActivity, "修改用户名", "输入用户名",
                        name.text.toString(),
                        { dialog: MaterialDialog, input: CharSequence ->
                            name.setText(input.toString())
                        })
                nameDialog.show()
            }
            R.id.img_layout -> {
                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
                    checkAndRequestPermissions()
                } else {
                    openAlbum()
                }
            }
        }
    }

    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {
        super.onActivityResult(requestCode, resultCode, data)
        if (requestCode == PICTURE_CODE_CHOOSE && resultCode == Activity.RESULT_OK) {
            val uriList = Matisse.obtainResult(data)
        }
    }

    private fun checkAndRequestPermissions() {
        // 检测权限
        for (eachPermission in REQUIRED_PERMISSION_LIST) {
            if (ContextCompat.checkSelfPermission(mActivity, eachPermission) != PackageManager.PERMISSION_GRANTED) {
                missingPermission.add(eachPermission)
            }
        }
        if (missingPermission.isEmpty()) {
            //做权限申请完后的事情
            openAlbum()
        } else if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
            ActivityCompat.requestPermissions(mActivity,
                    missingPermission.toTypedArray(),
                    REQUEST_PERMISSION_CODE)
        }
    }

    override fun onRequestPermissionsResult(requestCode: Int, permissions: Array<String>,
                                            grantResults: IntArray) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults)
        // 检测返回结果中的权限申请结果
        if (requestCode == REQUEST_PERMISSION_CODE) {
            for (i in grantResults.indices.reversed()) {
                if (grantResults[i] == PackageManager.PERMISSION_GRANTED) {
                    missingPermission.remove(permissions[i])
                }
            }
        }
        // 最后检查一次是否还有权限未申请
        if (missingPermission.isEmpty()) {
            //做权限申请完后的事情
            openAlbum()
        } else {
            showToast("权限未允许")
        }
    }

    fun openAlbum() {
        Matisse.from(mActivity)
                .choose(MimeType.allOf())
                .countable(true)
                .capture(true)
                .captureStrategy(
                        CaptureStrategy(true, "cn.iimedia.jb.fileprovider"))
                .maxSelectable(1)
                .addFilter(GifSizeFilter(320, 320, 5 * Filter.K * Filter.K))
                .gridExpectedSize(resources.getDimensionPixelSize(R.dimen.grid_expected_size))
                //.restrictOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT)
                .thumbnailScale(0.85f)
                .imageEngine(GlideEngine())
                .forResult(PICTURE_CODE_CHOOSE)
    }
}



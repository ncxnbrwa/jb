package cn.iimedia.jb.mine.activity

import android.content.Intent
import android.os.Bundle
import android.text.TextUtils
import android.view.View
import cn.iimedia.jb.R
import cn.iimedia.jb.common.HTTP_LOG_TAG
import cn.iimedia.jb.http.APIConstants
import cn.iimedia.jb.http.RetrofitHelper
import cn.iimedia.jb.http.bean.RegisterBean
import cn.iimedia.jb.http.bean.User
import cn.iimedia.jb.mine.fragment.ImgCodeDialog
import com.umeng.socialize.UMAuthListener
import com.umeng.socialize.UMShareAPI
import com.umeng.socialize.bean.SHARE_MEDIA
import com.xiong.appbase.base.BaseActivity
import com.xiong.appbase.custom.CustomTextWatcher
import com.xiong.appbase.extension.setVerify
import com.xiong.appbase.http.RequestEngine
import com.xiong.appbase.utils.DLog
import com.xiong.appbase.utils.ELS
import com.xiong.appbase.utils.EncryptUtil
import com.xiong.appbase.utils.RegExConstants
import kotlinx.android.synthetic.main.activity_register.*
import kotlinx.android.synthetic.main.bottom_third_party.*
import retrofit2.Call
import retrofit2.Callback
import retrofit2.Response

/**
 * Created by iiMedia on 2018/5/9.
 * 注册界面
 */
class RegisterActivity : BaseActivity(), View.OnClickListener {
    private val TAG = "RegisterActivity"
    private val api: APIConstants = RequestEngine.createService(APIConstants::class.java)
    private val els: ELS = ELS.getInstance()
    private var protocolChecked = true

    override fun getLayoutId(): Int {
        return R.layout.activity_register
    }

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)

        toolbar?.setNavigationOnClickListener { finish() }
        btn_verification?.setOnClickListener(this)
        btn_register?.setOnClickListener(this)
        ll_wechat?.setOnClickListener(this)
        ll_qq?.setOnClickListener(this)
        ll_weibo?.setOnClickListener(this)

        cb_protocol?.setOnCheckedChangeListener { buttonView, isChecked ->
            protocolChecked = isChecked
            DLog.w(TAG, "isChecked:$isChecked")
        }
        //初始化倒计时按钮
        btn_verification.onCreate()
        btn_verification.setPhoneMatch(false)
        btn_verification.setVerify(false)
        et_phone.addTextChangedListener(object : CustomTextWatcher() {
            override fun onTextChanged(s: CharSequence?, start: Int, before: Int, count: Int) {
                if (s?.length == 0) {
                    btn_verification.setPhoneMatch(false)
                    btn_verification.setVerify(false)
                } else {
                    if (!btn_verification.isCounting) {
                        if (Regex(RegExConstants.REGEX_MOBILE_EXACT).matches(s.toString())) {
                            btn_verification.setPhoneMatch(true)
                            btn_verification.setVerify()
                            phone_error.visibility = View.GONE
                        } else {
                            btn_verification.setPhoneMatch(false)
                            btn_verification.setVerify(false)
                        }
                    } else {
                        if (Regex(RegExConstants.REGEX_MOBILE_EXACT).matches(s.toString())) {
                            btn_verification.setPhoneMatch(true)
                            phone_error.visibility = View.GONE
                        } else {
                            btn_verification.setPhoneMatch(false)
                        }
                    }
                }
            }
        })

    }

    override fun onClick(v: View?) {
        when (v?.id) {
            R.id.btn_verification -> {
                val dialog = ImgCodeDialog(et_phone.text.toString(), btn_verification)
                dialog.show(supportFragmentManager, "imgDialog")
            }
            R.id.btn_register -> register()
            R.id.ll_wechat -> {
                UMShareAPI.get(mActivity).doOauthVerify(mActivity, SHARE_MEDIA.WEIXIN, authListener)
            }
            R.id.ll_weibo -> {
                UMShareAPI.get(mActivity).doOauthVerify(mActivity, SHARE_MEDIA.SINA, authListener)
            }
            R.id.ll_qq -> {
                UMShareAPI.get(mActivity).doOauthVerify(mActivity, SHARE_MEDIA.QQ, authListener)
            }
        }
    }

    override fun onSaveInstanceState(outState: Bundle?) {
        super.onSaveInstanceState(outState)
        UMShareAPI.get(mActivity).onSaveInstanceState(outState)
    }

    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {
        super.onActivityResult(requestCode, resultCode, data)
        UMShareAPI.get(mActivity).onActivityResult(requestCode, resultCode, data)
    }

    private fun register() {
        DLog.w(TAG, "protocolChecked:$protocolChecked")
        //注册
        val phone = et_phone.text.toString()
        val code = et_verification.text.toString()
        val psw = et_psw.text.toString()

        phone_error.visibility = View.GONE
        code_error.visibility = View.GONE
        psw_error.visibility = View.GONE
        if (TextUtils.isEmpty(phone)) {
            phone_error.visibility = View.VISIBLE
            phone_error.setText(resources.getString(R.string.phone_empty))
            return
        }
        if (!Regex(RegExConstants.REGEX_MOBILE_EXACT).matches(phone)) {
            phone_error.visibility = View.VISIBLE
            phone_error.setText(resources.getString(R.string.phone_not_match))
            return
        }
        if (TextUtils.isEmpty(code)) {
            code_error.visibility = View.VISIBLE
            code_error.setText(resources.getString(R.string.code_empty))
            return
        }
        if (TextUtils.isEmpty(psw)) {
            psw_error.visibility = View.VISIBLE
            psw_error.setText(resources.getString(R.string.password_empty))
            return
        }
        if (!protocolChecked) {
            showToast(resources.getString(R.string.protocol_false))
            return
        }

        // pc：手机号码验证码；ltype：注册方式；0：手机；phone：注册手机号；
        // imei：手机标识；tempKey:手机号，
        // device：设备类型：0：IOS;1:Android；passWd:密码；nickname:昵称
        val map = HashMap<String, Any>()
        map.put("pc", code)
        map.put("ltype", 0)
        map.put("phone", phone)
        map.put("imei", els.getStringData(ELS.IMEI))
        map.put("tempKey", phone)
        map.put("device", 1)
        map.put("passWd", EncryptUtil.makeMD5(psw))
        map.put("nickname", phone)
        val registerCall = api.register(map)
        registerCall.enqueue(object : Callback<RegisterBean> {
            override fun onResponse(call: Call<RegisterBean>?, response: Response<RegisterBean>?) {
                val bean = response?.body()
                //code：3：参数错误，具体错误查看msg；
                when (bean?.code) {
                    "3" -> {
                        showToast(resources.getString(R.string.parameter_error))
                        DLog.w(HTTP_LOG_TAG, "参数错误${bean.msg}")
                    }
                    "9" -> showToast(resources.getString(R.string.phone_registered))
                    "-1" -> showToast(resources.getString(R.string.server_error))
                    "1" -> {
                        els.saveStringData(ELS.USER_ID, bean.userId)
                        showToast(resources.getString(R.string.register_success))
                        finish()
                    }
                }
            }

            override fun onFailure(call: Call<RegisterBean>?, t: Throwable?) {
                DLog.w(HTTP_LOG_TAG, resources.getString(R.string.register_fail))
            }
        })
    }

    override fun onDestroy() {
        btn_verification.onDestroy()
        UMShareAPI.get(mActivity).release()
        super.onDestroy()
    }

    internal var authListener: UMAuthListener = object : UMAuthListener {
        override fun onStart(platform: SHARE_MEDIA) {
            showToast("授权开始")
        }

        override fun onComplete(platform: SHARE_MEDIA, action: Int, data: Map<String, String>) {
            showToast("授权完成")
            UMShareAPI.get(mActivity).getPlatformInfo(mActivity, platform, object : UMAuthListener {
                override fun onStart(share_media: SHARE_MEDIA) {
                    showToast("获取平台数据开始...")
                }

                override fun onComplete(platform: SHARE_MEDIA, i: Int, info: Map<String, String>) {
                    var platformname = 0

                    //platformname: 1：微信；2：QQ；3：微博
                    if (platform == SHARE_MEDIA.WEIXIN) {
                        platformname = 1
                    } else if (platform == SHARE_MEDIA.SINA) {
                        platformname = 3
                    } else if (platform == SHARE_MEDIA.QQ) {
                        platformname = 2
                    }
                    val uid = info["uid"].toString()
                    val headimg = info["iconurl"].toString()
                    val nickname = info["name"].toString()
                    RetrofitHelper(mActivity).loginThirdParty(User(nickname, headimg, uid, platformname))
                }

                override fun onError(share_media: SHARE_MEDIA, i: Int, throwable: Throwable) {
                    showToast("授权错误：" + i)
                }

                override fun onCancel(share_media: SHARE_MEDIA, i: Int) {
                    showToast("授权取消")
                }
            })
        }

        override fun onError(platform: SHARE_MEDIA, action: Int, t: Throwable) {
            showToast("授权失败")
        }

        override fun onCancel(platform: SHARE_MEDIA, action: Int) {
            showToast("授权取消")
        }
    }
}
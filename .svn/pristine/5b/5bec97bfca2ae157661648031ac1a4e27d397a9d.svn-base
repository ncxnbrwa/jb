package cn.iimedia.jb.mine.activity

import android.graphics.BitmapFactory
import android.os.Bundle
import android.text.TextUtils
import android.view.View
import cn.iimedia.jb.R
import cn.iimedia.jb.http.APIConstants
import com.xiong.appbase.base.BaseActivity
import com.xiong.appbase.custom.CustomTextWatcher
import com.xiong.appbase.extension.setVerify
import com.xiong.appbase.http.RequestEngine
import com.xiong.appbase.utils.DLog
import com.xiong.appbase.utils.ELS
import com.xiong.appbase.utils.RegExConstants
import kotlinx.android.synthetic.main.activity_register.*
import okhttp3.ResponseBody
import retrofit2.Call
import retrofit2.Callback
import retrofit2.Response

/**
 * Created by iiMedia on 2018/5/9.
 * 注册界面
 */
class RegisterActivity : BaseActivity(), View.OnClickListener {
    val TAG = "RegisterActivity"
    val api:APIConstants = RequestEngine.createService(APIConstants::class.java)
    val els:ELS = ELS.getInstance()
    var protocolChecked = true

    override fun getLayoutId(): Int {
        return R.layout.activity_register
    }

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        toolbar?.setNavigationOnClickListener { finish() }
        btn_verification?.setOnClickListener(this)
        btn_register?.setOnClickListener(this)
        cb_protocol?.setOnCheckedChangeListener { buttonView, isChecked ->
            protocolChecked = isChecked
            DLog.w(TAG, "isChecked:$isChecked")
        }
        //初始化倒计时按钮
        btn_verification.onCreate()
        btn_verification.setPhoneMatch(false)
        btn_verification.setVerify(false)
        et_phone.addTextChangedListener(object : CustomTextWatcher() {
            override fun onTextChanged(s: CharSequence?, start: Int, before: Int, count: Int) {
                if (s?.length == 0) {
                    btn_verification.setPhoneMatch(false)
                    btn_verification.setVerify(false)
                } else {
                    if (!btn_verification.isCounting) {
                        if (Regex(RegExConstants.REGEX_MOBILE_EXACT).matches(s.toString())) {
                            btn_verification.setPhoneMatch(true)
                            btn_verification.setVerify()
                            phone_error.visibility = View.GONE
                        } else {
                            btn_verification.setPhoneMatch(false)
                            btn_verification.setVerify(false)
                        }
                    } else {
                        if (Regex(RegExConstants.REGEX_MOBILE_EXACT).matches(s.toString())) {
                            btn_verification.setPhoneMatch(true)
                            phone_error.visibility = View.GONE
                        } else {
                            btn_verification.setPhoneMatch(false)
                        }
                    }
                }
            }
        })

        getImgCode()
    }

    override fun onClick(v: View?) {
        when (v?.id) {
            R.id.btn_verification -> verificationCode()
            R.id.btn_register -> register()
        }
    }

    private fun verificationCode() {
        //获取验证码
        val phone = et_phone.text.toString()

        showToast(resources.getString(R.string.send_code))
    }

    private fun register() {
        DLog.w(TAG, "protocolChecked:$protocolChecked")
        //注册
        val phone = et_phone.text.toString()
        val code = et_verification.text.toString()
        val psw = et_psw.text.toString()

        phone_error.visibility = View.GONE
        code_error.visibility = View.GONE
        psw_error.visibility = View.GONE
        if (TextUtils.isEmpty(phone)) {
            phone_error.visibility = View.VISIBLE
            phone_error.setText(resources.getString(R.string.phone_empty))
            return
        }
        if (!Regex(RegExConstants.REGEX_MOBILE_EXACT).matches(phone)) {
            phone_error.visibility = View.VISIBLE
            phone_error.setText(resources.getString(R.string.phone_not_match))
            return
        }
        if (TextUtils.isEmpty(code)) {
            code_error.visibility = View.VISIBLE
            code_error.setText(resources.getString(R.string.code_empty))
            return
        }
        if (TextUtils.isEmpty(psw)) {
            psw_error.visibility = View.VISIBLE
            psw_error.setText(resources.getString(R.string.password_empty))
            return
        }
        if (!protocolChecked) {
            showToast(resources.getString(R.string.protocol_false))
            return
        }

        showToast("注册成功")
        finish()
    }

    private fun getImgCode() {
        val imgCodeCall = api.getImgCode("phone",els.getStringData(ELS.IMEI))
        imgCodeCall.enqueue(object: Callback<ResponseBody>{
            override fun onFailure(call: Call<ResponseBody>?, t: Throwable?) {
                showToast("图形验证码获取失败")
            }

            override fun onResponse(call: Call<ResponseBody>?, response: Response<ResponseBody>?) {
                val body = response?.body()?.byteStream()
                //临时放在这测试
                code_img.setImageBitmap(BitmapFactory.decodeStream(body))
            }
        })
    }

    override fun onDestroy() {
        btn_verification.onDestroy()
        super.onDestroy()
    }
}
package cn.iimedia.jb.mine.activity

import android.os.Bundle
import android.text.TextUtils
import android.view.View
import cn.iimedia.jb.R
import cn.iimedia.jb.common.HTTP_LOG_TAG
import cn.iimedia.jb.common.RESET_PSW_CODE
import cn.iimedia.jb.common.RESET_PSW_PHONE
import cn.iimedia.jb.common.intentToResetPassword
import cn.iimedia.jb.http.APIConstants
import cn.iimedia.jb.http.bean.CommonCodeBean
import cn.iimedia.jb.mine.fragment.ImgCodeDialog
import com.xiong.appbase.base.BaseActivity
import com.xiong.appbase.custom.CustomTextWatcher
import com.xiong.appbase.extension.setVerify
import com.xiong.appbase.http.RequestEngine
import com.xiong.appbase.utils.DLog
import com.xiong.appbase.utils.ELS
import com.xiong.appbase.utils.RegExConstants
import kotlinx.android.synthetic.main.activity_forget_password.*
import retrofit2.Call
import retrofit2.Callback
import retrofit2.Response

/**
 * Created by iiMedia on 2018/5/10.
 * 忘记密码
 */
class ForgetPasswordActivity : BaseActivity(), View.OnClickListener {
    val api: APIConstants = RequestEngine.createService(APIConstants::class.java)
    val els: ELS = ELS.getInstance()

    override fun getLayoutId(): Int {
        return R.layout.activity_forget_password
    }

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        toolbar.setNavigationOnClickListener { finish() }
        btn_verification.setOnClickListener(this)
        btn_next.setOnClickListener(this)
        //初始化倒计时按钮
        btn_verification.onCreate()
        btn_verification.setPhoneMatch(false)
        btn_verification.setVerify(false)
        et_phone.addTextChangedListener(object : CustomTextWatcher() {
            override fun onTextChanged(s: CharSequence?, start: Int, before: Int, count: Int) {
                if (s?.length == 0) {
                    btn_verification.setPhoneMatch(false)
                    btn_verification.setVerify(false)
                } else {
                    if (!btn_verification.isCounting) {
                        if (Regex(RegExConstants.REGEX_MOBILE_EXACT).matches(s.toString())) {
                            btn_verification.setPhoneMatch(true)
                            btn_verification.setVerify()
                        } else {
                            btn_verification.setPhoneMatch(false)
                            btn_verification.setVerify(false)
                        }
                    } else {
                        if (Regex(RegExConstants.REGEX_MOBILE_EXACT).matches(s.toString())) {
                            btn_verification.setPhoneMatch(true)
                        } else {
                            btn_verification.setPhoneMatch(false)
                        }
                    }
                }
            }
        })
    }

    override fun onClick(v: View?) {
        when (v?.id) {
            R.id.btn_verification -> {
                val dialog = ImgCodeDialog(et_phone.text.toString())
                dialog.show(supportFragmentManager, "imgDialog")
            }
            R.id.btn_next -> next()
        }
    }

    private fun verifyCode() {
        //获取验证码
        val phone = et_phone.text.toString()
//        val imgCode = et_img_code.text.toString()
        val imgCode = ""
        val sendCodeCall = api.sendCode(phone, 1, imgCode, els.getStringData(ELS.IMEI))
        sendCodeCall.enqueue(object : Callback<CommonCodeBean> {
            override fun onFailure(call: Call<CommonCodeBean>?, t: Throwable?) {
                DLog.w(HTTP_LOG_TAG, resources.getString(R.string.send_code_fail))
                showToast(resources.getString(R.string.send_code_fail))
            }

            override fun onResponse(call: Call<CommonCodeBean>?, response: Response<CommonCodeBean>?) {
                val bean = response?.body()
                when (bean?.code) {
                    "1" -> showToast(resources.getString(R.string.send_code_success))
                    "4" -> showToast(resources.getString(R.string.phone_error))
                    "9" -> showToast(resources.getString(R.string.phone_registered))
                    "7" -> showToast(resources.getString(R.string.repeat_send))
                    "0" -> showToast(resources.getString(R.string.send_code_fail))
                    "3" -> showToast(resources.getString(R.string.img_code_error))
                }
            }
        })

    }

    private fun next() {
        val phone = et_phone.text.toString()
        val code = et_verification.text.toString()
        phone_error.visibility = View.GONE
        code_error.visibility = View.GONE
        if (TextUtils.isEmpty(phone)) {
            phone_error.visibility = View.VISIBLE
            phone_error.setText(resources.getString(R.string.phone_empty))
            return
        }
        if (!Regex(RegExConstants.REGEX_MOBILE_EXACT).matches(phone)) {
            phone_error.visibility = View.VISIBLE
            phone_error.setText(resources.getString(R.string.phone_not_match))
            return
        }
        if (TextUtils.isEmpty(code)) {
            code_error.visibility = View.VISIBLE
            code_error.setText(resources.getString(R.string.code_empty))
            return
        }

//        mApp.setInternalActivityParam(RESET_PSW_PHONE, phone)
//        mApp.setInternalActivityParam(RESET_PSW_CODE, code)
        val bundle = Bundle()
        bundle.putString(RESET_PSW_PHONE,phone)
        bundle.putString(RESET_PSW_CODE, code)
        intentToResetPassword(mActivity, bundle)
    }

    override fun onDestroy() {
        btn_verification.onDestroy()
        super.onDestroy()
    }
}
package cn.iimedia.jb.mine.fragment

import android.os.Bundle
import android.view.View
import cn.iimedia.jb.R
import cn.iimedia.jb.common.HTTP_LOG_TAG
import cn.iimedia.jb.http.APIConstants
import cn.iimedia.jb.http.bean.CollectBrandBean
import cn.iimedia.jb.http.bean.RankingBrandsList
import cn.iimedia.jb.mine.adapter.CollectBrandAdapter
import com.scwang.smartrefresh.layout.api.RefreshLayout
import com.scwang.smartrefresh.layout.listener.OnLoadMoreListener
import com.scwang.smartrefresh.layout.listener.OnRefreshListener
import com.xiong.appbase.base.BaseFragment
import com.xiong.appbase.custom.LinearLayoutManagerWrapper
import com.xiong.appbase.extension.addDivider
import com.xiong.appbase.http.RequestEngine
import com.xiong.appbase.utils.DLog
import com.xiong.appbase.utils.ELS
import kotlinx.android.synthetic.main.fragment_collect_brand.*
import kotlinx.android.synthetic.main.load_failure.*
import retrofit2.Call
import retrofit2.Callback
import retrofit2.Response

/**
 * Created by iiMedia on 2018/5/10.
 * 收藏品牌
 */
class FragmentCollectBrand : BaseFragment(), OnRefreshListener, OnLoadMoreListener, View.OnClickListener {
    val TAG = "FragmentCollectBrand"
    val api: APIConstants = RequestEngine.createService(APIConstants::class.java)
    val els: ELS = ELS.getInstance()
    var page = 1
    var collectList: ArrayList<RankingBrandsList> = ArrayList()
    var adapter: CollectBrandAdapter? = null

    override fun getLayoutId(): Int {
        return R.layout.fragment_collect_brand
    }

    companion object {
        fun getInstance(): FragmentCollectBrand {
            val f = FragmentCollectBrand()
            return f
        }
    }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)
        refresh_layout?.setOnRefreshListener(this)
        refresh_layout?.setOnLoadMoreListener(this)
        btn_refresh?.setOnClickListener(this)
        brand_list.layoutManager = LinearLayoutManagerWrapper(mActivity)
        brand_list.addDivider(mActivity, R.drawable.vertical_gray_divider_8dp)
        getData()
    }

    override fun onClick(v: View?) {
        when (v?.id) {
            R.id.btn_refresh -> refresh()
        }
    }

    override fun onRefresh(refreshLayout: RefreshLayout?) {
        refresh()
    }

    private fun refresh() {
        page = 1
        collectList.clear()
        refresh_layout?.setNoMoreData(false)
        getData()
    }

    override fun onLoadMore(refreshLayout: RefreshLayout?) {
        getData()
    }

    private fun getData() {
        val call = api.getCollectBrandData(0, els.getStringData(ELS.USER_ID)
                , page, 10, els.getStringData(ELS.IMEI))
        call.enqueue(object : Callback<CollectBrandBean> {
            override fun onFailure(call: Call<CollectBrandBean>?, t: Throwable?) {
                if (refresh_layout != null && refresh_layout.isRefreshing) {
                    refresh_layout?.finishRefresh()
                }
                if (refresh_layout.isLoading) {
                    refresh_layout?.finishLoadMore()
                }
                load_failure_layout?.visibility = View.VISIBLE
                ll_null?.visibility = View.GONE
                refresh_layout?.visibility = View.GONE
                DLog.w(HTTP_LOG_TAG, "榜单收藏获取失败")
            }

            override fun onResponse(call: Call<CollectBrandBean>?, response: Response<CollectBrandBean>?) {
                if (refresh_layout != null && refresh_layout.isRefreshing) {
                    refresh_layout?.finishRefresh()
                }
                if (refresh_layout.isLoading) {
                    refresh_layout?.finishLoadMore()
                }
                val bean = response?.body()
                if (bean?.code.equals("1")) {
                    val list = bean?.result
                    if (list != null && list.isNotEmpty()) {
                        ll_null?.visibility = View.GONE
                        load_failure_layout?.visibility = View.GONE
                        refresh_layout?.visibility = View.VISIBLE
                        if (list.size < 10) {
                            refresh_layout?.finishLoadMoreWithNoMoreData()
                        } else {
                            page++
                        }
                        collectList.addAll(list)
                        removeDuplication(collectList)
                        initAdapter()
                    } else {
                        load_failure_layout?.visibility = View.GONE
                        ll_null?.visibility = View.VISIBLE
                        refresh_layout?.visibility = View.GONE
                    }
                } else {
                    load_failure_layout?.visibility = View.VISIBLE
                    ll_null?.visibility = View.GONE
                    refresh_layout?.visibility = View.GONE
                }
            }
        })
    }

    private fun removeDuplication(dataList: ArrayList<RankingBrandsList>) {
        //最新榜单数据去重
        for (i in 0 until dataList.size - 1) {
            (dataList.size - 1 downTo i + 1)
                    .filter { dataList[it].id == dataList[i].id }
                    .forEach { dataList.remove(dataList[i]) }
        }
    }

    private fun initAdapter() {
        if (adapter == null) {
            adapter = CollectBrandAdapter(mActivity, collectList)
            DLog.w(TAG, "收藏列表:$collectList")
            brand_list?.adapter = adapter
        } else {
            adapter?.notifyDataSetChanged()
        }
    }
}
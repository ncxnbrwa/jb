package cn.iimedia.jb

import android.Manifest
import android.content.Context
import android.content.pm.PackageManager
import android.os.Build
import android.os.Bundle
import android.os.Handler
import android.support.v4.app.ActivityCompat
import android.support.v4.app.Fragment
import android.support.v4.content.ContextCompat
import android.telephony.TelephonyManager
import cn.iimedia.jb.classify.FragmentClassify
import cn.iimedia.jb.common.DATABASE_TAG
import cn.iimedia.jb.common.HTTP_LOG_TAG
import cn.iimedia.jb.homepage.FragmentHome
import cn.iimedia.jb.http.APIConstants
import cn.iimedia.jb.http.bean.CollectBean
import cn.iimedia.jb.http.bean.CollectDatabase
import cn.iimedia.jb.http.bean.CollectResult
import cn.iimedia.jb.mine.fragment.FragmentMine
import com.xiong.appbase.base.BaseActivity
import com.xiong.appbase.http.RequestEngine
import com.xiong.appbase.utils.DLog
import com.xiong.appbase.utils.ELS
import kotlinx.android.synthetic.main.activity_main.*
import org.litepal.crud.DataSupport
import org.litepal.crud.callback.FindMultiCallback
import org.litepal.crud.callback.SaveCallback
import retrofit2.Call
import retrofit2.Callback
import retrofit2.Response
import vip.frendy.tablayout.entity.TabEntity
import vip.frendy.tablayout.listener.CustomTabEntity
import vip.frendy.tablayout.listener.OnTabSelectListener

class MainActivity : BaseActivity() {
    private val mFragments: ArrayList<Fragment> = ArrayList()

    private val mTitles: ArrayList<String> = arrayListOf("主页", "分类", "我的")
    private val mIconUnselectIds = intArrayOf(R.mipmap.label_home, R.mipmap.label_class,
            R.mipmap.label_personal)
    private val mIconSelectIds = intArrayOf(R.mipmap.label_home_pre, R.mipmap.label_class_pre,
            R.mipmap.label_personal_pre)
    private val mTabEntities = ArrayList<CustomTabEntity>()
    var els: ELS? = null
    val api: APIConstants = RequestEngine.createService(APIConstants::class.java)

    override fun getLayoutId(): Int {
        return R.layout.activity_main
    }

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        mFragments.add(FragmentHome.getInstance())
        mFragments.add(FragmentClassify.getInstance())
        mFragments.add(FragmentMine.getInstance())
        els = ELS.getInstance()

        //配置底部导航栏
        for (i in mTitles.indices) {
            mTabEntities.add(TabEntity(mTitles[i], mIconSelectIds[i], mIconUnselectIds[i]))
        }
        bottom_tab.setTabData(mTabEntities, this, R.id.container, mFragments)
        bottom_tab.setOnTabSelectListener(object : OnTabSelectListener {
            override fun onTabSelect(current: Int) {
                val last = bottom_tab.getLastTab()
                if (last != current) {
                    mFragments[current].userVisibleHint = true
                    mFragments[last].userVisibleHint = false
                }
            }

            override fun onTabReselect(position: Int) {}
        })

        //申请获取imei的权限
        if (Build.VERSION.SDK_INT >= 23) {
            if (ContextCompat.checkSelfPermission(mActivity, Manifest.permission.READ_PHONE_STATE)
                    != PackageManager.PERMISSION_GRANTED) {
                ActivityCompat.requestPermissions(mActivity,
                        arrayOf(Manifest.permission.READ_PHONE_STATE), 1)
            }
        }
        val tm = getSystemService(Context.TELEPHONY_SERVICE) as TelephonyManager
        els?.saveStringData(ELS.IMEI, tm.getDeviceId())

//        getCollectData(0)
//        getCollectData(1)
    }

    private fun getCollectData(type: Int) {
        //初始化收藏数据库
        val call = api.getCollectData(type, els?.getStringData(ELS.USER_ID)
                , 1, 10, els?.getStringData(ELS.IMEI))
        call.enqueue(object : Callback<CollectBean> {
            override fun onFailure(call: Call<CollectBean>?, t: Throwable?) {
                DLog.w(HTTP_LOG_TAG, "收藏数据获取失败")
            }

            override fun onResponse(call: Call<CollectBean>?, response: Response<CollectBean>?) {
                val bean = response?.body()
                if (bean?.code.equals("1")) {
                    val dataList = bean?.result
                    if (dataList != null && dataList.isNotEmpty()) {
                        val hasInitDatabase = els?.getBoolData(ELS.HAS_INIT_DATABASE)
                        if (hasInitDatabase!!) {
                            updateDatabase(dataList)
                        } else {
                            initDatabase(dataList)
                            els?.saveBoolData(ELS.HAS_INIT_DATABASE, true)
                        }
                    }
                }
            }
        })
    }

    private fun updateDatabase(dataList: ArrayList<CollectResult>) {
        for ( data in dataList) {
            val projectId = if (data.bgtVal == null) data.id.toInt() else data.bgTid.toInt()
            val databaseItem = DataSupport.where("project_id=?", "${projectId}")
                    .find(CollectDatabase::class.java)
            if (databaseItem.isEmpty()) {
                //数据库中不存在该数据,则新建一个
                val collectDatabase1 = CollectDatabase()
                collectDatabase1.project_id = projectId
                collectDatabase1.save()
            } else {
                //数据库中存在该数据,则更新
                val collectDatabase2 = databaseItem[0]
                collectDatabase2.project_id = projectId
                collectDatabase2.save()
            }
        }
    }

    private fun initDatabase(dataList: ArrayList<CollectResult>) {
        //第一次启动初始化数据库
        val databaseList = ArrayList<CollectDatabase>()
        for (data in dataList) {
            val collectDatabase = CollectDatabase()
            val projectId = if (data.bgtVal == null) data.id.toInt() else data.bgTid.toInt()
            collectDatabase.project_id = projectId
            databaseList.add(collectDatabase)
        }
        DataSupport.saveAllAsync(databaseList).listen(object : SaveCallback {
            override fun onFinish(success: Boolean) {
                DataSupport.findAllAsync(CollectDatabase::class.java).listen(object : FindMultiCallback {
                    override fun <T : Any?> onFinish(t: MutableList<T>?) {
                        val list: ArrayList<CollectDatabase> = t as ArrayList<CollectDatabase>
                        DLog.w(DATABASE_TAG, list.toString())
                    }
                })
            }
        })
    }

    //按两次退出程序
    var clickTwiceFlag = false

    override fun onBackPressedSupport() {
        if (clickTwiceFlag) {
            super.onBackPressedSupport()
            mApp.finishApplication()
        } else {
            clickTwiceFlag = true
            showToast("快速按两次退出程序")
        }
        Handler().postDelayed({ clickTwiceFlag = false }, 2000)
    }
}
